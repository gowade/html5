package h

<% if (tagType != "Element") { %>
// <%= privType %> represents HTML <<%= htmlTag %>> tag
type <%= privType %> struct {
<% if (parentIface) { %>
  <%= parentIface.privType %>
<% } -%>
}

// <%= tagType %> creates a HTML <<%= htmlTag %>> tag
func <%= tagType %>() *<%= privType %> {
	e := &<%= privType %>{}
	e.a = make(map[string]interface{})
	e.tagName = "<%= htmlTag %>"
	return e
}

// S sets the element's CSS properties
func (e *<%= privType %>) S(style StyleMap) *<%= privType %> {
	e.htmlElement.S(style)
	return 
}

// Key sets virtual dom's special property to instruct the diffing mechanism
// to reorder the node instead of replacing it
func (e *<%= privType %>) Key(key interface{}) *<%= privType %> {
	e.key = F(key)
	return e
}
<% } %>

<% _.forEach(members, function(member) {
	if (member.readonly || member.idlType.generic) {
		return;
	}

	var mGoType = goTypeMap[member.idlType.idlType];
	if (!mGoType) {
		return;
	}

	var mMethodName = toGoMethodName(member.name);
	var mAttr = member.name.toLowerCase();
%>
// <%= mMethodName %> sets the element's "<%= mAttr %>" attribute
func (e *<%= privType %>) <%= mMethodName %>(v <%= mGoType %>) *<%= privType %> {
	<% switch (mGoType) {
	case "bool": -%>
		if v { e.a["<%= mAttr %>"] = "" } else { delete(e.a, "<%= mAttr %>") }
	<% break;
	default: -%>
		e.a["<%= mAttr %>"] = v
	<% } -%>
	return e
}
<% }) %>

<% if (parentIface) { %>
<% parentRecursive(parentIface, function(p, pp) { -%>
<% _.forEach(p.members, function(member) {
	if (member.readonly || member.idlType.generic) {
		return;
	}

	var mGoType = goTypeMap[member.idlType.idlType];
	if (!mGoType) {
		return;
	}

	var mMethodName = toGoMethodName(member.name);
	var mAttr = member.name.toLowerCase();
%>
// <%= mMethodName %> sets the element's "<%= mAttr %>" attribute
func (e *<%= privType %>) <%= mMethodName %>(v <%= mGoType %>) *<%= privType %> {
	<% switch (mGoType) {
	case "bool": -%>
		if v { e.a["<%= mAttr %>"] = "" } else { delete(e.a, "<%= mAttr %>") }
	<% break;
	default: -%>
		e.a["<%= mAttr %>"] = v
	<% } -%>
	return e
}
<% }) %>
<% }) -%>
<% } %>
